% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_methods.R, R/package.R
\docType{package}
\name{autoplotly}
\alias{autoplotly}
\alias{autoplotly}
\alias{autoplotly-package}
\title{Automatic Visualization of Popular Statistical Results Using \code{plotly.js} and \code{ggplot2}}
\usage{
autoplotly(object, ..., width = NULL, height = NULL, tooltip = "all",
  dynamicTicks = FALSE, layerData = 1, originalData = TRUE,
  source = "A")
}
\arguments{
\item{object}{The object that represents your statistical result, e.g. \code{stats::prcomp(iris[-5])}.}

\item{...}{Arguments passed to \code{ggfortify::autoplot} function for the applied
object. For example, if your object is constructed from \code{stats::prcomp(iris[-5])},
you can find the documentation for the list of additional arguments via
\code{?ggfortify:::autoplot.prcomp()}.}

\item{width}{Width of the plot in pixels (optional, defaults to automatic sizing).}

\item{height}{Height of the plot in pixels (optional, defaults to automatic sizing).}

\item{tooltip}{a character vector specifying which aesthetic mappings to show
in the tooltip. The default, "all", means show all the aesthetic mappings
(including the unofficial "text" aesthetic). The order of variables here will
also control the order they appear. For example, use
\code{tooltip = c("y", "x", "colour")} if you want y first, x second, and
colour last.}

\item{dynamicTicks}{should plotly.js dynamically generate axis tick labels?
Dynamic ticks are useful for updating ticks in response to zoom/pan
interactions; however, they can not always reproduce labels as they
would appear in the static ggplot2 image.}

\item{layerData}{data from which layer should be returned?}

\item{originalData}{should the "original" or "scaled" data be returned?}

\item{source}{a character string of length 1. Match the value of this string
with the source argument in \code{\link[=event_data]{event_data()}} to retrieve the
event data corresponding to a specific plot (shiny apps can have multiple plots).}
}
\description{
This function provides functionality to automatically generate interactive
plot for many popular statistical results supported by \code{ggfortify} package using plotly and ggplot2.

This package provides functionalities to automatically generate interactive visualizations for
many popular statistical results supported by ggfortify package with plotly.js and ggplot2 style.
The generated plot can also be easily extended using ggplot2 syntax while staying interactive.
}
\examples{
# Automatically generate interactive plot for results produced by `stats::prcomp`
p <- autoplotly(prcomp(iris[c(1, 2, 3, 4)]), data = iris,
                colour = 'Species', label = TRUE, label.size = 3, frame = TRUE)

# You can apply additional ggplot2 elements to interactive plot built using `autoplotly()`
p <- p +
  ggplot2::ggtitle("Principal Components Analysis") +
  ggplot2::labs(y = "Second Principal Components", x = "First Principal Components")
p
}
